{"version":3,"sources":["message-location.svg","my-location.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","messagesIcon","L","Icon","iconUrl","messageIcon","iconSize","iconAnchor","popupAnchor","myIcons","myIcon","schema","Joi","object","keys","name","string","min","max","required","message","API_URL","window","location","hostname","App","state","lat","lng","haveUserLocation","zoom","userMessage","sendingMessage","sentMessage","messages","formIsValid","result","validate","error","formSubmitted","event","preventDefault","setState","fetch","method","headers","body","JSON","stringify","latitude","longitude","then","res","json","console","log","setTimeout","valueChanged","target","value","prevState","haveSeenLocation","reduce","all","key","toFixed","otherMessages","push","navigator","geolocation","getCurrentPosition","position","coords","lon","this","className","Map","center","TileLayer","attribution","url","Marker","icon","Popup","map","_id","CardBody","CardTitle","CardText","autoPlay","loop","src","Form","onSubmit","FormGroup","Label","for","Input","onChange","type","id","placeholder","Button","color","disabled","React","Component","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e000c2d8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/message-location.3d0c5526.svg\";","module.exports = __webpack_public_path__ + \"static/media/my-location.40808547.svg\";","import React from 'react';\nimport './App.css';\n\nimport {Map, TileLayer, Marker, Popup} from 'react-leaflet'\nimport L from 'leaflet'\nimport Joi from 'joi'\n\nimport {\n    CardText, CardBody,\n    CardTitle, Button,\n    Form, FormGroup,\n    Label, Input\n} from 'reactstrap';\n\nimport messageIcon from './message-location.svg'\nimport myIcon from './my-location.svg'\n\nexport const messagesIcon = new L.Icon({\n    iconUrl: messageIcon,\n    iconSize: [35, 38],\n    iconAnchor: [13.5, 41],\n    popupAnchor: [0, -41],\n})\n\nexport const myIcons = new L.Icon({\n    iconUrl: myIcon,\n    iconSize: [35, 38],\n    iconAnchor: [13.5, 41],\n    popupAnchor: [0, -41],\n})\n\nconst schema = Joi.object().keys({\n    name: Joi.string().min(1).max(500).required(),\n    message: Joi.string().min(1).max(500).required(),\n})\n\nconst API_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000/api/v1/messages' : 'production_url_here'\n\nclass App extends React.Component {\n    state = {\n        location: {\n            lat: 50.433300,\n            lng: 30.416700,\n        },\n        haveUserLocation: false,\n        zoom: 2,\n        userMessage: {\n            name: '',\n            message: ''\n        },\n        sendingMessage: false,\n        sentMessage: false,\n        messages: []\n    }\n\n    componentDidMount() {\n        fetch(API_URL)\n            .then(res => res.json())\n            .then(messages => {\n                const haveSeenLocation = {}\n                messages = messages.reduce((all, message) => {\n                    debugger;\n                    const key = `${message.latitude.toFixed(2)}${message.longitude.toFixed(2)}`\n                    if (haveSeenLocation[key]) {\n                        console.log(haveSeenLocation[key], 'key')\n                        haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || []\n                        haveSeenLocation[key].otherMessages.push(message)\n                    } else {\n                        haveSeenLocation[key] = message;\n                        all.push(message);\n                    }\n                    return all;\n                }, [])\n                this.setState({\n                    messages\n                })\n            })\n\n        navigator.geolocation.getCurrentPosition((position) => {\n            this.setState({\n                location: {\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                },\n                haveUserLocation: true,\n                zoom: 13,\n            })\n        }, () => {\n            console.log('uh, oh... they didnt give us their location...')\n            fetch('http://ip-api.com/json/')\n                .then(res => res.json())\n                .then(location => {\n                    this.setState({\n                        location: {\n                            lat: location.lat,\n                            lng: location.lon\n                        },\n                        haveUserLocation: true,\n                        zoom: 13\n                    })\n                })\n        });\n    }\n\n    formIsValid = () => {\n        const userMessage = {\n            name: this.state.userMessage.name,\n            message: this.state.userMessage.message\n        }\n        const result = schema.validate(userMessage)\n\n        if (this.state.haveUserLocation) {\n            if (!result.error) {\n                return true\n            }\n            return false\n        }\n    }\n\n    formSubmitted = (event) => {\n        event.preventDefault()\n        this.setState({\n            sendingMessage: true\n        })\n        if (this.formIsValid()) {\n            debugger;\n            fetch(API_URL, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: this.state.userMessage.name,\n                    message: this.state.userMessage.message,\n                    latitude: this.state.location.lat,\n                    longitude: this.state.location.lng\n                })\n            })\n                .then(res => res.json())\n                .then(message => {\n                    console.log(message)\n                    setTimeout(() => {\n                        this.setState({\n                            sendingMessage: false,\n                            sentMessage: true\n                        })\n                    }, 4000)\n                })\n        }\n    }\n\n    valueChanged = (event) => {\n        const {name, value} = event.target\n        this.setState((prevState) => ({\n            userMessage: {\n                ...prevState.userMessage,\n                [name]: value\n            }\n        }))\n    }\n\n    render() {\n        const position = [this.state.location.lat, this.state.location.lng]\n        return (\n            <div className=\"map\">\n                <Map className=\"map\" center={position} zoom={this.state.zoom}>\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    />\n                    {\n                        this.state.haveUserLocation\n                            ? <Marker position={position} icon={myIcons}>\n                                <Popup>\n                                    A pretty CSS3 popup. <br/> Easily customizable.\n                                </Popup>\n                            </Marker>\n                            : \"\"\n                    }\n                    {\n                        this.state.messages.map(message => {\n                            return (<Marker key={message._id} position={[message.latitude, message.longitude]} icon={messagesIcon}>\n                                <Popup>\n                                    <p><em>{message.name}</em>{message.message}</p>\n                                    { message.otherMessages ? message.otherMessages.map(message => <p key={message._id}><em>{message.name}</em> : {message.message}</p>) : \"\" }\n                                </Popup>\n                            </Marker>)\n                        })\n                    }\n                </Map>\n                <CardBody className=\"message-form\">\n                    <CardTitle>Welcome to GuestM.app</CardTitle>\n                    <CardText>Leave a message with your location!</CardText>\n                    <CardText>Thanks for stopping by!</CardText>\n                    {!this.state.sendingMessage && !this.state.sentMessage && this.state.haveUserLocation ?\n                        <Form onSubmit={this.formSubmitted}>\n                            <FormGroup>\n                                <Label for=\"name\">Name</Label>\n                                <Input\n                                    onChange={this.valueChanged}\n                                    type=\"text\"\n                                    name=\"name\"\n                                    id=\"name\"\n                                    placeholder=\"Enter your name\"/>\n                            </FormGroup>\n                            <FormGroup>\n                                <Label for=\"message\">Message</Label>\n                                <Input\n                                    onChange={this.valueChanged}\n                                    type=\"textarea\"\n                                    name=\"message\"\n                                    id=\"message\"\n                                    placeholder=\"Enter a message\"/>\n                            </FormGroup>\n                            <Button type=\"submit\" color=\"info\" disabled={!this.formIsValid()}>Send</Button>\n                        </Form>\n                        : this.state.sendingMessage || !this.state.haveUserLocation ?\n                            <video className=\"video\" autoPlay loop\n                                   src=\"https://media.giphy.com/media/xkC0zz2GObJfy/giphy.mp4\"/>\n                            : <CardText>Thanks for submitting a message!</CardText>\n                    }\n                </CardBody>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'leaflet/dist/leaflet.css'\nimport 'bootstrap/dist/css/bootstrap.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}