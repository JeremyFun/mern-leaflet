{"ast":null,"code":"var _jsxFileName = \"/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayerFunc.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Marker, FeatureGroup, Popup } from 'react-leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\n\nvar fetchData = function fetchData(url, options) {\n  let request = fetch(url, options);\n  return request.then(r => r.json()).then(data => data.features);\n};\n\nexport default function GeojsonLayer({\n  url,\n  cluster\n}) {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    if (url) {\n      const abortController = new AbortController();\n      fetchData(url, {\n        signal: abortController.signal\n      }).then(data => {\n        setData(data);\n      }); // cancel fetch on component unmount\n\n      return () => {\n        abortController.abort();\n      };\n    }\n  }, [url]);\n  var GroupComponent = cluster ? MarkerClusterGroup : FeatureGroup; // console.info(data);\n\n  return /*#__PURE__*/React.createElement(GroupComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, data.map(f => /*#__PURE__*/React.createElement(Marker, {\n    key: JSON.stringify(f.properties),\n    position: f.geometry.coordinates.reverse(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    minWidth: 200,\n    closeButton: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"red\",\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"b\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 29\n    }\n  }, \"Hello\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 29\n    }\n  }, \"I am \", f.properties.name))))));\n}","map":{"version":3,"sources":["/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayerFunc.jsx"],"names":["React","useState","useEffect","Marker","FeatureGroup","Popup","MarkerClusterGroup","fetchData","url","options","request","fetch","then","r","json","data","features","GeojsonLayer","cluster","setData","abortController","AbortController","signal","abort","GroupComponent","map","f","JSON","stringify","properties","geometry","coordinates","reverse","backgroundColor","color","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,SAASC,MAAT,EAAiBC,YAAjB,EAA+BC,KAA/B,QAA4C,eAA5C;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;;AAEA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,OAAxB,EAAiC;AAC7C,MAAIC,OAAO,GAAGC,KAAK,CAACH,GAAD,EAAMC,OAAN,CAAnB;AAEA,SAAOC,OAAO,CACTE,IADE,CACGC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADR,EAEFF,IAFE,CAEGG,IAAI,IAAIA,IAAI,CAACC,QAFhB,CAAP;AAGH,CAND;;AAQA,eAAe,SAASC,YAAT,CAAuB;AAACT,EAAAA,GAAD;AAAMU,EAAAA;AAAN,CAAvB,EAAuC;AAClD,QAAM,CAACH,IAAD,EAAOI,OAAP,IAAkBlB,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAK;AACX,QAAIM,GAAJ,EAAS;AACL,YAAMY,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AAEAd,MAAAA,SAAS,CAACC,GAAD,EAAM;AAAEc,QAAAA,MAAM,EAAEF,eAAe,CAACE;AAA1B,OAAN,CAAT,CAAmDV,IAAnD,CAAwDG,IAAI,IAAI;AAC5DI,QAAAA,OAAO,CAACJ,IAAD,CAAP;AACH,OAFD,EAHK,CAOL;;AACA,aAAO,MAAM;AACTK,QAAAA,eAAe,CAACG,KAAhB;AACH,OAFD;AAGH;AAEJ,GAdQ,EAcN,CAACf,GAAD,CAdM,CAAT;AAgBA,MAAIgB,cAAc,GAAGN,OAAO,GAAGZ,kBAAH,GAAwBF,YAApD,CAnBkD,CAqBlD;;AACA,sBACI,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKW,IAAI,CAACU,GAAL,CAASC,CAAC,iBACP,oBAAC,MAAD;AACI,IAAA,GAAG,EAAEC,IAAI,CAACC,SAAL,CAAeF,CAAC,CAACG,UAAjB,CADT;AAEI,IAAA,QAAQ,EAAEH,CAAC,CAACI,QAAF,CAAWC,WAAX,CAAuBC,OAAvB,EAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,KAAD;AAAO,IAAA,QAAQ,EAAE,GAAjB;AAAsB,IAAA,WAAW,EAAE,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,eAAe,EAAC,KAAjB;AAAwBC,MAAAA,KAAK,EAAC;AAA9B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAASR,CAAC,CAACG,UAAF,CAAaM,IAAtB,CAFJ,CADJ,CAJJ,CADH,CADL,CADJ;AAiBH","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport { Marker, FeatureGroup, Popup } from 'react-leaflet';\nimport MarkerClusterGroup from \"react-leaflet-markercluster\";\n\nvar fetchData = function fetchData(url, options) {\n    let request = fetch(url, options);\n\n    return request\n        .then(r => r.json())\n        .then(data => data.features);\n}\n\nexport default function GeojsonLayer ({url, cluster}) {\n    const [data, setData] = useState([]);\n\n    useEffect(()=> {\n        if (url) {\n            const abortController = new AbortController();\n\n            fetchData(url, { signal: abortController.signal }).then(data => {\n                setData(data);\n            });\n\n            // cancel fetch on component unmount\n            return () => {\n                abortController.abort();\n            };\n        }\n\n    }, [url]);\n\n    var GroupComponent = cluster ? MarkerClusterGroup : FeatureGroup;\n\n    // console.info(data);\n    return (\n        <GroupComponent>\n            {data.map(f => (\n                <Marker\n                    key={JSON.stringify(f.properties)}\n                    position={f.geometry.coordinates.reverse()}\n                >\n                    <Popup minWidth={200} closeButton={false}>\n                        <div style={{backgroundColor:\"red\", color:\"white\"}}>\n                            <b>Hello</b>\n                            <p>I am {f.properties.name}</p>\n                        </div>\n                    </Popup>\n                </Marker>\n            ))}\n        </GroupComponent>\n    );\n}"]},"metadata":{},"sourceType":"module"}