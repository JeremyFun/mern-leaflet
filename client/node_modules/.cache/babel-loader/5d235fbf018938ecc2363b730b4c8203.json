{"ast":null,"code":"var _jsxFileName = \"/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/MapPage.js\";\nimport React from 'react';\nimport '../App.css';\nimport { Map, GeoJSON, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport Joi from 'joi';\nimport MessageCard from \"./MessageCard\";\nimport { getMessages, getLocation, sendMessage } from \"../API/API\";\nimport messageIcon from \"../assets/svg/message-location.svg\";\nimport myIcon from \"../assets/svg/my-location.svg\";\nimport { Button, FormGroup, Label, Input } from 'reactstrap';\nimport Basemap from \"./Basemap\";\nimport mapData from \"../data/countries.json\";\nimport GeojsonLayer from \"./GeojsonLayerFunc\";\nexport const messagesIcon = new L.Icon({\n  iconUrl: messageIcon,\n  iconSize: [50, 82]\n});\nexport const myIcons = new L.Icon({\n  iconUrl: myIcon,\n  iconSize: [50, 82]\n});\nconst schema = Joi.object().keys({\n  name: Joi.string().min(1).max(500).required(),\n  message: Joi.string().min(1).max(500).required()\n});\nL.Icon.Default.imagePath = \"https://unpkg.com/leaflet@1.5.0/dist/images/\";\nexport class MapPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      location: {\n        lat: 50.433300,\n        lng: 30.416700\n      },\n      haveUserLocation: false,\n      zoom: 2,\n      userMessage: {\n        name: '',\n        message: ''\n      },\n      sendingMessage: false,\n      showMessage: false,\n      sentMessage: false,\n      messages: [//     {_id: \"5f7a5a6545d74c7b01d32559\", name: \"Yatsiy Vladislav\", message: \"This place is cool!\", latitude: 50.4501, longitude: 30.5234, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5af345d74c7b01d3255a\", name: \"Ivan\", message: \"THis is is is!\", latitude: 52.520007, longitude: 13.404954, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5b2c45d74c7b01d3255b\", name: \"Hex\", message: \"This isisi silsd;fjlkdsj fksjd klfjsl!\", latitude: 51.507351, longitude: -0.127758, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5b4845d74c7b01d3255c\", name: \"Jack\", message: \"sjdhfklsdjklfjskdlfjkls j flskdjfkl \", latitude: 55.755826, longitude: 37.6173, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5b6545d74c7b01d3255d\", name: \"Hejj\", message: \"sdjfksljdkf sdklfjk sldjfkl s!\", latitude: 37.386052, longitude: -122.083851, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5b9245d74c7b01d3255e\", name: \"Berx\", message: \"TH lksldfkfl;sdk fsdl;kf l;dsk;f \", latitude: 19.075984, longitude: 72.877656, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5bcf45d74c7b01d3255f\", name: \"Yura\", message: \"The complete sentenses!\", latitude: 37.774929, longitude: -122.419416, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5c0145d74c7b01d32560\", name: \"Uri\", message: \"Hello \", latitude: 31.230416, longitude: 121.473701, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5c2245d74c7b01d32561\", name: \"Pail\", message: \"Helll oodaspfkl;j dsfjkljfsd!\", latitude: -23.55052, longitude: -46.633309, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7a5c3e45d74c7b01d32562\", name: \"HEkc\", message: \"JJLF;SDKL; FKSDL;K FL;SD\", latitude: 35.689487, longitude: 139.691706, date: \"2020-10-04T23:29:55.002Z\"},\n        //     {_id: \"5f7b3aa9f3c915122e75cf12\", name: \"dsfsd\", message: \"fsdfsd\", latitude: 50.4365056, longitude: 30.503731199999994, date: \"2020-10-04T23:29:55.002Z\"}\n        // ],\n      ],\n      basemap: 'osm',\n      color: \"#ffff00\",\n      isCountry: false,\n      geojsonvisible: false\n    };\n    this.countryStyle = {\n      fillColor: \"#fff\",\n      fillOpacity: 1,\n      color: \"black\",\n      weight: 2\n    };\n\n    this.printMesssageToConsole = event => {\n      console.log(\"Clicked\");\n    };\n\n    this.changeCountryColor = event => {\n      event.target.setStyle({\n        color: \"green\",\n        fillColor: this.state.color,\n        fillOpacity: 1\n      });\n    };\n\n    this.onEachCountry = (country, layer) => {\n      const countryName = country.properties.ADMIN;\n      console.log(countryName);\n      layer.bindPopup(countryName);\n      layer.options.fillOpacity = Math.random(); //0-1 (0.1, 0.2, 0.3)\n      // const colorIndex = Math.floor(Math.random() * this.colors.length);\n      // layer.options.fillColor = this.colors[colorIndex]; //0\n\n      layer.on({\n        click: this.changeCountryColor\n      });\n    };\n\n    this.colorChange = event => {\n      this.setState({\n        color: event.target.value\n      });\n    };\n\n    this.showMessage = () => {\n      this.setState({\n        showMessage: true,\n        zoom: 14\n      });\n    };\n\n    this.quitWithMessage = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.formIsValid = () => {\n      const userMessage = {\n        name: this.state.userMessage.name,\n        message: this.state.userMessage.message\n      };\n      const result = schema.validate(userMessage);\n\n      if (this.state.haveUserLocation) {\n        if (!result.error) {\n          return true;\n        }\n\n        return false;\n      }\n    };\n\n    this.formSubmitted = event => {\n      event.preventDefault();\n      this.setState({\n        sendingMessage: true\n      });\n\n      if (this.formIsValid()) {\n        const message = {\n          name: this.state.userMessage.name,\n          message: this.state.userMessage.message,\n          latitude: this.state.location.lat,\n          longitude: this.state.location.lng\n        };\n        sendMessage(message).then(result => {\n          setTimeout(() => {\n            this.setState({\n              sendingMessage: false,\n              sentMessage: true\n            });\n          }, 4000);\n        });\n      }\n    };\n\n    this.valueChanged = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState(prevState => ({\n        userMessage: { ...prevState.userMessage,\n          [name]: value\n        }\n      }));\n    };\n\n    this.onBMChange = bm => {\n      this.setState({\n        basemap: bm\n      });\n    };\n\n    this.showCountry = () => {\n      this.setState({\n        isCountry: true,\n        zoom: 5\n      });\n    };\n\n    this.unCounty = () => {\n      this.setState({\n        isCountry: false,\n        zoom: 13\n      });\n    };\n\n    this.onGeojsonToggle = e => {\n      this.setState({\n        geojsonvisible: e.currentTarget.checked,\n        zoom: 4\n      });\n    };\n  }\n\n  componentDidMount() {\n    getMessages().then(messages => {\n      this.setState({\n        messages,\n        zoom: 3.5\n      });\n    });\n    getLocation().then(location => {\n      this.setState({\n        location,\n        haveUserLocation: true,\n        zoom: 13\n      });\n    });\n    console.log(mapData);\n  }\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng];\n    const basemapsDict = {\n      osm: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      hot: \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\n      dark: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png\",\n      cycle: \"https://dev.{s}.tile.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      className: \"map\",\n      center: position,\n      zoom: this.state.zoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: basemapsDict[this.state.basemap],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 21\n      }\n    }), this.state.haveUserLocation ? /*#__PURE__*/React.createElement(Marker, {\n      position: position,\n      icon: myIcons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 33\n      }\n    }, \"Here will be \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 50\n      }\n    }), \" your comment.\")) : \"\", this.state.messages.map(message => {\n      return /*#__PURE__*/React.createElement(Marker, {\n        key: message._id,\n        position: [message.latitude, message.longitude],\n        icon: messagesIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"em\", {\n        className: \"message-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 40\n        }\n      }, message.name), \" : \", message.message), message.otherMessages ? message.otherMessages.map(message => /*#__PURE__*/React.createElement(\"p\", {\n        key: message._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 99\n        }\n      }, /*#__PURE__*/React.createElement(\"em\", {\n        className: \"message-name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 41\n        }\n      }, message.name), \" : \", message.message)) : \"\"));\n    }), this.state.isCountry ? /*#__PURE__*/React.createElement(GeoJSON, {\n      style: this.countryStyle,\n      data: mapData.features,\n      onEachFeature: this.onEachCountry,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 45\n      }\n    }) : \"\", /*#__PURE__*/React.createElement(FormGroup, {\n      check: true,\n      className: \"message-form-three\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      check: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Input, {\n      type: \"checkbox\",\n      name: \"layertoggle\",\n      id: \"layertoggle\",\n      size: \"sm\",\n      style: {\n        width: \"20px\"\n      },\n      value: this.state.geojsonvisible,\n      onChange: this.onGeojsonToggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 29\n      }\n    }), \"Check me\")), this.state.geojsonvisible && /*#__PURE__*/React.createElement(GeojsonLayer, {\n      url: \"places.json\",\n      cluster: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 51\n      }\n    })), /*#__PURE__*/React.createElement(Basemap, {\n      basemap: this.state.basemap,\n      onChange: this.onBMChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 17\n      }\n    }), this.state.isCountry ? /*#__PURE__*/React.createElement(\"input\", {\n      type: \"color\",\n      value: this.state.color,\n      onChange: this.colorChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 44\n      }\n    }) : \"\", !this.state.showMessage ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      outline: true,\n      color: \"primary\",\n      onClick: this.showMessage,\n      className: \"message-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 29\n      }\n    }, \"Add message\")) : /*#__PURE__*/React.createElement(MessageCard, {\n      sendingMessage: this.state.sendingMessage,\n      sentMessage: this.state.sentMessage,\n      haveUserLocation: this.state.haveUserLocation,\n      formSubmitted: this.formSubmitted,\n      valueChanged: this.valueChanged,\n      formIsValid: this.formIsValid,\n      quitWithMessage: this.quitWithMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 25\n      }\n    }), this.state.isCountry ? !this.state.showMessage ? /*#__PURE__*/React.createElement(Button, {\n      outline: true,\n      color: \"primary\",\n      onClick: this.unCounty,\n      className: \"message-form-two\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 51\n      }\n    }, \"Exit with mode\") : \"\" : !this.state.showMessage ? /*#__PURE__*/React.createElement(Button, {\n      outline: true,\n      color: \"primary\",\n      onClick: this.showCountry,\n      className: \"message-form-two\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 53\n      }\n    }, \"Highlight countries\") : \"\");\n  }\n\n}","map":{"version":3,"sources":["/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/MapPage.js"],"names":["React","Map","GeoJSON","TileLayer","Marker","Popup","L","Joi","MessageCard","getMessages","getLocation","sendMessage","Button","FormGroup","Label","Input","Basemap","mapData","GeojsonLayer","messagesIcon","Icon","iconUrl","messageIcon","iconSize","myIcons","myIcon","schema","object","keys","name","string","min","max","required","message","Default","imagePath","MapPage","Component","state","location","lat","lng","haveUserLocation","zoom","userMessage","sendingMessage","showMessage","sentMessage","messages","basemap","color","isCountry","geojsonvisible","countryStyle","fillColor","fillOpacity","weight","printMesssageToConsole","event","console","log","changeCountryColor","target","setStyle","onEachCountry","country","layer","countryName","properties","ADMIN","bindPopup","options","Math","random","on","click","colorChange","setState","value","quitWithMessage","formIsValid","result","validate","error","formSubmitted","preventDefault","latitude","longitude","then","setTimeout","valueChanged","prevState","onBMChange","bm","showCountry","unCounty","onGeojsonToggle","e","currentTarget","checked","componentDidMount","render","position","basemapsDict","osm","hot","dark","cycle","map","_id","otherMessages","features","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,YAAP;AAEA,SAAQC,GAAR,EAAaC,OAAb,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,KAAzC,QAAqD,eAArD;AACA,OAAOC,CAAP,MAAc,SAAd;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,SAAQC,WAAR,EAAqBC,WAArB,EAAkCC,WAAlC,QAAoD,YAApD;;;AAKA,SAAQC,MAAR,EAAgBC,SAAhB,EAA2BC,KAA3B,EAAkCC,KAAlC,QAA8C,YAA9C;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AAEA,OAAO,MAAMC,YAAY,GAAG,IAAIb,CAAC,CAACc,IAAN,CAAW;AACnCC,EAAAA,OAAO,EAAEC,WAD0B;AAEnCC,EAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL;AAFyB,CAAX,CAArB;AAKP,OAAO,MAAMC,OAAO,GAAG,IAAIlB,CAAC,CAACc,IAAN,CAAW;AAC9BC,EAAAA,OAAO,EAAEI,MADqB;AAE9BF,EAAAA,QAAQ,EAAE,CAAC,EAAD,EAAK,EAAL;AAFoB,CAAX,CAAhB;AAKP,MAAMG,MAAM,GAAGnB,GAAG,CAACoB,MAAJ,GAAaC,IAAb,CAAkB;AAC7BC,EAAAA,IAAI,EAAEtB,GAAG,CAACuB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,GAAxB,EAA6BC,QAA7B,EADuB;AAE7BC,EAAAA,OAAO,EAAE3B,GAAG,CAACuB,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBC,GAApB,CAAwB,GAAxB,EAA6BC,QAA7B;AAFoB,CAAlB,CAAf;AAKA3B,CAAC,CAACc,IAAF,CAAOe,OAAP,CAAeC,SAAf,GAA2B,8CAA3B;AAEA,OAAO,MAAMC,OAAN,SAAsBrC,KAAK,CAACsC,SAA5B,CAAsC;AAAA;AAAA;AAAA,SACzCC,KADyC,GACjC;AACJC,MAAAA,QAAQ,EAAE;AACNC,QAAAA,GAAG,EAAE,SADC;AAENC,QAAAA,GAAG,EAAE;AAFC,OADN;AAKJC,MAAAA,gBAAgB,EAAE,KALd;AAMJC,MAAAA,IAAI,EAAE,CANF;AAOJC,MAAAA,WAAW,EAAE;AACThB,QAAAA,IAAI,EAAE,EADG;AAETK,QAAAA,OAAO,EAAE;AAFA,OAPT;AAWJY,MAAAA,cAAc,EAAE,KAXZ;AAYJC,MAAAA,WAAW,EAAE,KAZT;AAaJC,MAAAA,WAAW,EAAE,KAbT;AAcJC,MAAAA,QAAQ,EAAE,CACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZM,OAdN;AA6BJC,MAAAA,OAAO,EAAE,KA7BL;AA8BJC,MAAAA,KAAK,EAAE,SA9BH;AA+BJC,MAAAA,SAAS,EAAE,KA/BP;AAiCJC,MAAAA,cAAc,EAAE;AAjCZ,KADiC;AAAA,SA0DzCC,YA1DyC,GA0D1B;AACXC,MAAAA,SAAS,EAAE,MADA;AAEXC,MAAAA,WAAW,EAAE,CAFF;AAGXL,MAAAA,KAAK,EAAE,OAHI;AAIXM,MAAAA,MAAM,EAAE;AAJG,KA1D0B;;AAAA,SAiEzCC,sBAjEyC,GAiEfC,KAAD,IAAW;AAChCC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,KAnEwC;;AAAA,SAqEzCC,kBArEyC,GAqEnBH,KAAD,IAAW;AAC5BA,MAAAA,KAAK,CAACI,MAAN,CAAaC,QAAb,CAAsB;AAClBb,QAAAA,KAAK,EAAE,OADW;AAElBI,QAAAA,SAAS,EAAE,KAAKhB,KAAL,CAAWY,KAFJ;AAGlBK,QAAAA,WAAW,EAAE;AAHK,OAAtB;AAKH,KA3EwC;;AAAA,SA6EzCS,aA7EyC,GA6EzB,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAChC,YAAMC,WAAW,GAAGF,OAAO,CAACG,UAAR,CAAmBC,KAAvC;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ;AACAD,MAAAA,KAAK,CAACI,SAAN,CAAgBH,WAAhB;AAEAD,MAAAA,KAAK,CAACK,OAAN,CAAchB,WAAd,GAA4BiB,IAAI,CAACC,MAAL,EAA5B,CALgC,CAKW;AAC3C;AACA;;AAEAP,MAAAA,KAAK,CAACQ,EAAN,CAAS;AACLC,QAAAA,KAAK,EAAE,KAAKd;AADP,OAAT;AAGH,KAzFwC;;AAAA,SA2FzCe,WA3FyC,GA2F1BlB,KAAD,IAAW;AACrB,WAAKmB,QAAL,CAAc;AAAC3B,QAAAA,KAAK,EAAEQ,KAAK,CAACI,MAAN,CAAagB;AAArB,OAAd;AACH,KA7FwC;;AAAA,SAgGzChC,WAhGyC,GAgG3B,MAAM;AAChB,WAAK+B,QAAL,CAAc;AACV/B,QAAAA,WAAW,EAAE,IADH;AAEVH,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIH,KArGwC;;AAAA,SAuGzCoC,eAvGyC,GAuGvB,MAAM;AACpB,WAAKF,QAAL,CAAc;AACV/B,QAAAA,WAAW,EAAE;AADH,OAAd;AAGH,KA3GwC;;AAAA,SA6GzCkC,WA7GyC,GA6G3B,MAAM;AAChB,YAAMpC,WAAW,GAAG;AAChBhB,QAAAA,IAAI,EAAE,KAAKU,KAAL,CAAWM,WAAX,CAAuBhB,IADb;AAEhBK,QAAAA,OAAO,EAAE,KAAKK,KAAL,CAAWM,WAAX,CAAuBX;AAFhB,OAApB;AAIA,YAAMgD,MAAM,GAAGxD,MAAM,CAACyD,QAAP,CAAgBtC,WAAhB,CAAf;;AAEA,UAAI,KAAKN,KAAL,CAAWI,gBAAf,EAAiC;AAC7B,YAAI,CAACuC,MAAM,CAACE,KAAZ,EAAmB;AACf,iBAAO,IAAP;AACH;;AACD,eAAO,KAAP;AACH;AACJ,KA1HwC;;AAAA,SA4HzCC,aA5HyC,GA4HxB1B,KAAD,IAAW;AACvBA,MAAAA,KAAK,CAAC2B,cAAN;AACA,WAAKR,QAAL,CAAc;AACVhC,QAAAA,cAAc,EAAE;AADN,OAAd;;AAGA,UAAI,KAAKmC,WAAL,EAAJ,EAAwB;AACpB,cAAM/C,OAAO,GAAG;AACZL,UAAAA,IAAI,EAAE,KAAKU,KAAL,CAAWM,WAAX,CAAuBhB,IADjB;AAEZK,UAAAA,OAAO,EAAE,KAAKK,KAAL,CAAWM,WAAX,CAAuBX,OAFpB;AAGZqD,UAAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWC,QAAX,CAAoBC,GAHlB;AAIZ+C,UAAAA,SAAS,EAAE,KAAKjD,KAAL,CAAWC,QAAX,CAAoBE;AAJnB,SAAhB;AAMA/B,QAAAA,WAAW,CAACuB,OAAD,CAAX,CACKuD,IADL,CACWP,MAAD,IAAY;AACdQ,UAAAA,UAAU,CAAC,MAAM;AACb,iBAAKZ,QAAL,CAAc;AACVhC,cAAAA,cAAc,EAAE,KADN;AAEVE,cAAAA,WAAW,EAAE;AAFH,aAAd;AAIH,WALS,EAKP,IALO,CAAV;AAMH,SARL;AASH;AACJ,KAlJwC;;AAAA,SAoJzC2C,YApJyC,GAoJzBhC,KAAD,IAAW;AACtB,YAAM;AAAC9B,QAAAA,IAAD;AAAOkD,QAAAA;AAAP,UAAgBpB,KAAK,CAACI,MAA5B;AACA,WAAKe,QAAL,CAAec,SAAD,KAAgB;AAC1B/C,QAAAA,WAAW,EAAE,EACT,GAAG+C,SAAS,CAAC/C,WADJ;AAET,WAAChB,IAAD,GAAQkD;AAFC;AADa,OAAhB,CAAd;AAMH,KA5JwC;;AAAA,SA8JzCc,UA9JyC,GA8J3BC,EAAD,IAAQ;AACjB,WAAKhB,QAAL,CAAc;AACV5B,QAAAA,OAAO,EAAE4C;AADC,OAAd;AAGH,KAlKwC;;AAAA,SAoKzCC,WApKyC,GAoK3B,MAAM;AAChB,WAAKjB,QAAL,CAAc;AACV1B,QAAAA,SAAS,EAAE,IADD;AAEVR,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIH,KAzKwC;;AAAA,SA2KzCoD,QA3KyC,GA2K9B,MAAM;AACb,WAAKlB,QAAL,CAAc;AACV1B,QAAAA,SAAS,EAAE,KADD;AAEVR,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIH,KAhLwC;;AAAA,SAmLzCqD,eAnLyC,GAmLtBC,CAAD,IAAO;AAErB,WAAKpB,QAAL,CAAc;AACVzB,QAAAA,cAAc,EAAE6C,CAAC,CAACC,aAAF,CAAgBC,OADtB;AAEVxD,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIH,KAzLwC;AAAA;;AAsCzCyD,EAAAA,iBAAiB,GAAG;AAChB5F,IAAAA,WAAW,GACNgF,IADL,CACUxC,QAAQ,IAAI;AACd,WAAK6B,QAAL,CAAc;AACV7B,QAAAA,QADU;AAEVL,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIH,KANL;AAOAlC,IAAAA,WAAW,GACN+E,IADL,CACUjD,QAAQ,IAAI;AACd,WAAKsC,QAAL,CAAc;AACVtC,QAAAA,QADU;AAEVG,QAAAA,gBAAgB,EAAE,IAFR;AAGVC,QAAAA,IAAI,EAAE;AAHI,OAAd;AAKH,KAPL;AAQAgB,IAAAA,OAAO,CAACC,GAAR,CAAY5C,OAAZ;AACH;;AAqIDqF,EAAAA,MAAM,GAAG;AACL,UAAMC,QAAQ,GAAG,CAAC,KAAKhE,KAAL,CAAWC,QAAX,CAAoBC,GAArB,EAA0B,KAAKF,KAAL,CAAWC,QAAX,CAAoBE,GAA9C,CAAjB;AAEA,UAAM8D,YAAY,GAAG;AACjBC,MAAAA,GAAG,EAAE,oDADY;AAEjBC,MAAAA,GAAG,EAAE,uDAFY;AAGjBC,MAAAA,IAAI,EAAE,+DAHW;AAIjBC,MAAAA,KAAK,EAAE;AAJU,KAArB;AAMA,wBACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,GAAD;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,MAAM,EAAEL,QAA7B;AAAuC,MAAA,IAAI,EAAE,KAAKhE,KAAL,CAAWK,IAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,SAAD;AACI,MAAA,WAAW,EAAC,2EADhB;AAEI,MAAA,GAAG,EAAE4D,YAAY,CAAC,KAAKjE,KAAL,CAAWW,OAAZ,CAFrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAMQ,KAAKX,KAAL,CAAWI,gBAAX,gBACM,oBAAC,MAAD;AAAQ,MAAA,QAAQ,EAAE4D,QAAlB;AAA4B,MAAA,IAAI,EAAE/E,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADjB,mBADF,CADN,GAMM,EAZd,EAeQ,KAAKe,KAAL,CAAWU,QAAX,CAAoB4D,GAApB,CAAwB3E,OAAO,IAAI;AAC/B,0BAAQ,oBAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,OAAO,CAAC4E,GAArB;AAA0B,QAAA,QAAQ,EAAE,CAAC5E,OAAO,CAACqD,QAAT,EAAmBrD,OAAO,CAACsD,SAA3B,CAApC;AACQ,QAAA,IAAI,EAAErE,YADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAEJ,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAG;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8Be,OAAO,CAACL,IAAtC,CAAH,SAAuDK,OAAO,CAACA,OAA/D,CADJ,EAEKA,OAAO,CAAC6E,aAAR,GAAwB7E,OAAO,CAAC6E,aAAR,CAAsBF,GAAtB,CAA0B3E,OAAO,iBAAI;AAAG,QAAA,GAAG,EAAEA,OAAO,CAAC4E,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAC1D;AAAI,QAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8B5E,OAAO,CAACL,IAAtC,CAD0D,SACNK,OAAO,CAACA,OADF,CAArC,CAAxB,GAC+E,EAHpF,CAFI,CAAR;AAQH,KATD,CAfR,EA0BK,KAAKK,KAAL,CAAWa,SAAX,gBAAuB,oBAAC,OAAD;AACpB,MAAA,KAAK,EAAE,KAAKE,YADQ;AAEpB,MAAA,IAAI,EAAErC,OAAO,CAAC+F,QAFM;AAGpB,MAAA,aAAa,EAAE,KAAK/C,aAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,GAII,EA9BT,eAqCI,oBAAC,SAAD;AAAW,MAAA,KAAK,MAAhB;AAAiB,MAAA,SAAS,EAAC,oBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,KAAK,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,UAAZ;AACO,MAAA,IAAI,EAAC,aADZ;AAEO,MAAA,EAAE,EAAC,aAFV;AAGO,MAAA,IAAI,EAAC,IAHZ;AAIO,MAAA,KAAK,EAAE;AAACgD,QAAAA,KAAK,EAAE;AAAR,OAJd;AAKO,MAAA,KAAK,EAAE,KAAK1E,KAAL,CAAWc,cALzB;AAMO,MAAA,QAAQ,EAAE,KAAK4C,eANtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,aADJ,CArCJ,EAmDK,KAAK1D,KAAL,CAAWc,cAAX,iBAA6B,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAE,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAnDlC,CADJ,eAuDI,oBAAC,OAAD;AAAS,MAAA,OAAO,EAAE,KAAKd,KAAL,CAAWW,OAA7B;AAAsC,MAAA,QAAQ,EAAE,KAAK2C,UAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvDJ,EA0DQ,KAAKtD,KAAL,CAAWa,SAAX,gBAAuB;AACnB,MAAA,IAAI,EAAC,OADc;AAEnB,MAAA,KAAK,EAAE,KAAKb,KAAL,CAAWY,KAFC;AAGnB,MAAA,QAAQ,EAAE,KAAK0B,WAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAvB,GAIK,EA9Db,EAiEQ,CAAC,KAAKtC,KAAL,CAAWQ,WAAZ,gBAEI,uDACI,oBAAC,MAAD;AAAQ,MAAA,OAAO,MAAf;AACQ,MAAA,KAAK,EAAC,SADd;AAEQ,MAAA,OAAO,EAAE,KAAKA,WAFtB;AAGQ,MAAA,SAAS,EAAC,cAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,CAFJ,gBAUI,oBAAC,WAAD;AACI,MAAA,cAAc,EAAE,KAAKR,KAAL,CAAWO,cAD/B;AAEI,MAAA,WAAW,EAAE,KAAKP,KAAL,CAAWS,WAF5B;AAGI,MAAA,gBAAgB,EAAE,KAAKT,KAAL,CAAWI,gBAHjC;AAII,MAAA,aAAa,EAAE,KAAK0C,aAJxB;AAKI,MAAA,YAAY,EAAE,KAAKM,YALvB;AAMI,MAAA,WAAW,EAAE,KAAKV,WANtB;AAOI,MAAA,eAAe,EAAE,KAAKD,eAP1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA3EZ,EAsFQ,KAAKzC,KAAL,CAAWa,SAAX,GACI,CAAC,KAAKb,KAAL,CAAWQ,WAAZ,gBAA0B,oBAAC,MAAD;AAAQ,MAAA,OAAO,MAAf;AACQ,MAAA,KAAK,EAAC,SADd;AAEQ,MAAA,OAAO,EAAE,KAAKiD,QAFtB;AAGQ,MAAA,SAAS,EAAC,kBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA1B,GAI2B,EAL/B,GAMM,CAAC,KAAKzD,KAAL,CAAWQ,WAAZ,gBAA0B,oBAAC,MAAD;AAAQ,MAAA,OAAO,MAAf;AACQ,MAAA,KAAK,EAAC,SADd;AAEQ,MAAA,OAAO,EAAE,KAAKgD,WAFtB;AAGQ,MAAA,SAAS,EAAC,kBAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA1B,GAI8B,EAhG5C,CADJ;AAqGH;;AA1SwC","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nimport {Map, GeoJSON, TileLayer, Marker, Popup} from 'react-leaflet'\nimport L from 'leaflet'\nimport Joi from 'joi'\n\nimport MessageCard from \"./MessageCard\";\n\nimport {getMessages, getLocation, sendMessage} from \"../API/API\";\n\nimport messageIcon from '../assets/svg/message-location.svg';\nimport myIcon from '../assets/svg/my-location.svg';\n\nimport {Button, FormGroup, Label, Input} from 'reactstrap';\n\nimport Basemap from \"./Basemap\";\nimport mapData from \"../data/countries.json\";\nimport GeojsonLayer from \"./GeojsonLayerFunc\";\n\nexport const messagesIcon = new L.Icon({\n    iconUrl: messageIcon,\n    iconSize: [50, 82],\n})\n\nexport const myIcons = new L.Icon({\n    iconUrl: myIcon,\n    iconSize: [50, 82]\n})\n\nconst schema = Joi.object().keys({\n    name: Joi.string().min(1).max(500).required(),\n    message: Joi.string().min(1).max(500).required(),\n})\n\nL.Icon.Default.imagePath = \"https://unpkg.com/leaflet@1.5.0/dist/images/\";\n\nexport class MapPage extends React.Component {\n    state = {\n        location: {\n            lat: 50.433300,\n            lng: 30.416700,\n        },\n        haveUserLocation: false,\n        zoom: 2,\n        userMessage: {\n            name: '',\n            message: ''\n        },\n        sendingMessage: false,\n        showMessage: false,\n        sentMessage: false,\n        messages: [\n            //     {_id: \"5f7a5a6545d74c7b01d32559\", name: \"Yatsiy Vladislav\", message: \"This place is cool!\", latitude: 50.4501, longitude: 30.5234, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5af345d74c7b01d3255a\", name: \"Ivan\", message: \"THis is is is!\", latitude: 52.520007, longitude: 13.404954, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5b2c45d74c7b01d3255b\", name: \"Hex\", message: \"This isisi silsd;fjlkdsj fksjd klfjsl!\", latitude: 51.507351, longitude: -0.127758, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5b4845d74c7b01d3255c\", name: \"Jack\", message: \"sjdhfklsdjklfjskdlfjkls j flskdjfkl \", latitude: 55.755826, longitude: 37.6173, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5b6545d74c7b01d3255d\", name: \"Hejj\", message: \"sdjfksljdkf sdklfjk sldjfkl s!\", latitude: 37.386052, longitude: -122.083851, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5b9245d74c7b01d3255e\", name: \"Berx\", message: \"TH lksldfkfl;sdk fsdl;kf l;dsk;f \", latitude: 19.075984, longitude: 72.877656, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5bcf45d74c7b01d3255f\", name: \"Yura\", message: \"The complete sentenses!\", latitude: 37.774929, longitude: -122.419416, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5c0145d74c7b01d32560\", name: \"Uri\", message: \"Hello \", latitude: 31.230416, longitude: 121.473701, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5c2245d74c7b01d32561\", name: \"Pail\", message: \"Helll oodaspfkl;j dsfjkljfsd!\", latitude: -23.55052, longitude: -46.633309, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7a5c3e45d74c7b01d32562\", name: \"HEkc\", message: \"JJLF;SDKL; FKSDL;K FL;SD\", latitude: 35.689487, longitude: 139.691706, date: \"2020-10-04T23:29:55.002Z\"},\n            //     {_id: \"5f7b3aa9f3c915122e75cf12\", name: \"dsfsd\", message: \"fsdfsd\", latitude: 50.4365056, longitude: 30.503731199999994, date: \"2020-10-04T23:29:55.002Z\"}\n            // ],\n        ],\n\n        basemap: 'osm',\n        color: \"#ffff00\",\n        isCountry: false,\n\n        geojsonvisible: false,\n    }\n\n\n    componentDidMount() {\n        getMessages()\n            .then(messages => {\n                this.setState({\n                    messages,\n                    zoom: 3.5\n                })\n            })\n        getLocation()\n            .then(location => {\n                this.setState({\n                    location,\n                    haveUserLocation: true,\n                    zoom: 13,\n                })\n            })\n        console.log(mapData);\n    }\n\n\n    countryStyle = {\n        fillColor: \"#fff\",\n        fillOpacity: 1,\n        color: \"black\",\n        weight: 2,\n    };\n\n    printMesssageToConsole = (event) => {\n        console.log(\"Clicked\");\n    };\n\n    changeCountryColor = (event) => {\n        event.target.setStyle({\n            color: \"green\",\n            fillColor: this.state.color,\n            fillOpacity: 1,\n        });\n    };\n\n    onEachCountry = (country, layer) => {\n        const countryName = country.properties.ADMIN;\n        console.log(countryName);\n        layer.bindPopup(countryName);\n\n        layer.options.fillOpacity = Math.random(); //0-1 (0.1, 0.2, 0.3)\n        // const colorIndex = Math.floor(Math.random() * this.colors.length);\n        // layer.options.fillColor = this.colors[colorIndex]; //0\n\n        layer.on({\n            click: this.changeCountryColor,\n        });\n    };\n\n    colorChange = (event) => {\n        this.setState({color: event.target.value});\n    };\n\n\n    showMessage = () => {\n        this.setState({\n            showMessage: true,\n            zoom: 14\n        })\n    }\n\n    quitWithMessage = () => {\n        this.setState({\n            showMessage: false\n        })\n    }\n\n    formIsValid = () => {\n        const userMessage = {\n            name: this.state.userMessage.name,\n            message: this.state.userMessage.message\n        }\n        const result = schema.validate(userMessage)\n\n        if (this.state.haveUserLocation) {\n            if (!result.error) {\n                return true\n            }\n            return false\n        }\n    }\n\n    formSubmitted = (event) => {\n        event.preventDefault()\n        this.setState({\n            sendingMessage: true\n        })\n        if (this.formIsValid()) {\n            const message = {\n                name: this.state.userMessage.name,\n                message: this.state.userMessage.message,\n                latitude: this.state.location.lat,\n                longitude: this.state.location.lng\n            }\n            sendMessage(message)\n                .then((result) => {\n                    setTimeout(() => {\n                        this.setState({\n                            sendingMessage: false,\n                            sentMessage: true\n                        })\n                    }, 4000)\n                })\n        }\n    }\n\n    valueChanged = (event) => {\n        const {name, value} = event.target\n        this.setState((prevState) => ({\n            userMessage: {\n                ...prevState.userMessage,\n                [name]: value\n            }\n        }))\n    }\n\n    onBMChange = (bm) => {\n        this.setState({\n            basemap: bm\n        });\n    }\n\n    showCountry = () => {\n        this.setState({\n            isCountry: true,\n            zoom: 5\n        })\n    }\n\n    unCounty = () => {\n        this.setState({\n            isCountry: false,\n            zoom: 13\n        })\n    }\n\n\n    onGeojsonToggle = (e) => {\n\n        this.setState({\n            geojsonvisible: e.currentTarget.checked,\n            zoom: 4\n        });\n    }\n\n\n    render() {\n        const position = [this.state.location.lat, this.state.location.lng]\n\n        const basemapsDict = {\n            osm: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            hot: \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\n            dark: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png\",\n            cycle: \"https://dev.{s}.tile.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n        }\n        return (\n            <div className=\"map\">\n                <Map className=\"map\" center={position} zoom={this.state.zoom}>\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url={basemapsDict[this.state.basemap]}\n                    />\n                    {\n                        this.state.haveUserLocation\n                            ? <Marker position={position} icon={myIcons}>\n                                <Popup>\n                                    Here will be <br/> your comment.\n                                </Popup>\n                            </Marker>\n                            : \"\"\n                    }\n                    {\n                        this.state.messages.map(message => {\n                            return (<Marker key={message._id} position={[message.latitude, message.longitude]}\n                                            icon={messagesIcon}>\n                                <Popup>\n                                    <p><em className=\"message-name\">{message.name}</em> : {message.message}</p>\n                                    {message.otherMessages ? message.otherMessages.map(message => <p key={message._id}>\n                                        <em className=\"message-name\">{message.name}</em> : {message.message}</p>) : \"\"}\n                                </Popup>\n                            </Marker>)\n                        })\n                    }\n                    {this.state.isCountry ? <GeoJSON\n                        style={this.countryStyle}\n                        data={mapData.features}\n                        onEachFeature={this.onEachCountry}\n                    /> : \"\"}\n                    {/*<div className=\"geojson-toggle\">*/}\n                    {/*    <label htmlFor=\"layertoggle\">Toggle Geojson </label>*/}\n                    {/*    <input type=\"checkbox\"*/}\n                    {/*           name=\"layertoggle\" id=\"layertoggle\"*/}\n                    {/*           value={this.state.geojsonvisible} onChange={this.onGeojsonToggle}/>*/}\n                    {/*</div>*/}\n                    <FormGroup check className=\"message-form-three\">\n                        <Label check>\n                            <Input type=\"checkbox\"\n                                   name=\"layertoggle\"\n                                   id=\"layertoggle\"\n                                   size=\"sm\"\n                                   style={{width: \"20px\"}}\n                                   value={this.state.geojsonvisible}\n                                   onChange={this.onGeojsonToggle}\n                            />\n                            Check me\n                        </Label>\n                    </FormGroup>\n\n                    {this.state.geojsonvisible && <GeojsonLayer url=\"places.json\" cluster={true}/>}\n                </Map>\n\n                <Basemap basemap={this.state.basemap} onChange={this.onBMChange}/>\n\n                {\n                    this.state.isCountry ? <input\n                        type=\"color\"\n                        value={this.state.color}\n                        onChange={this.colorChange}\n                    /> : \"\"\n                }\n                {\n                    !this.state.showMessage\n                        ?\n                        <>\n                            <Button outline\n                                    color=\"primary\"\n                                    onClick={this.showMessage}\n                                    className=\"message-form\"\n                            >Add message</Button>\n                        </>\n                        :\n                        <MessageCard\n                            sendingMessage={this.state.sendingMessage}\n                            sentMessage={this.state.sentMessage}\n                            haveUserLocation={this.state.haveUserLocation}\n                            formSubmitted={this.formSubmitted}\n                            valueChanged={this.valueChanged}\n                            formIsValid={this.formIsValid}\n                            quitWithMessage={this.quitWithMessage}\n                        />\n                }\n                {\n                    this.state.isCountry ?\n                        !this.state.showMessage ? <Button outline\n                                                          color=\"primary\"\n                                                          onClick={this.unCounty}\n                                                          className=\"message-form-two\"\n                        >Exit with mode</Button> : \"\"\n                        : !this.state.showMessage ? <Button outline\n                                                            color=\"primary\"\n                                                            onClick={this.showCountry}\n                                                            className=\"message-form-two\"\n                        >Highlight countries</Button> : \"\"\n                }\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}