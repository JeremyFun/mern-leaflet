{"ast":null,"code":"var _jsxFileName = \"/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayer.js\";\nimport React from 'react';\nimport { GeoJSON, FeatureGroup, Popup } from 'react-leaflet';\nimport \"../css/GeojsonLayer.css\";\nexport default class GeojsonLayer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.myStyle = () => {\n      return {\n        color: \"green\",\n        weight: 3,\n        opacity: 1,\n        fillColor: \"red\",\n        dashArray: '8 5'\n      };\n    };\n\n    this.state = {\n      data: []\n    };\n    console.log('contructor');\n  }\n\n  render() {\n    console.log('render');\n    console.info(this.state.data);\n    return /*#__PURE__*/React.createElement(FeatureGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, this.state.data.map(f => {\n      return /*#__PURE__*/React.createElement(GeoJSON, {\n        key: f.properties.id,\n        data: f,\n        style: this.myStyle,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 28\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 25\n        }\n      }, f.properties.name));\n    }));\n  }\n\n  componentDidMount() {\n    if (this.props.url) {\n      this.fetchData(this.props.url);\n    }\n\n    console.log('did mount');\n  }\n\n  componentWillUnmount() {\n    console.log('will unmount');\n  }\n\n  fetchData(url) {\n    let request = fetch(url);\n    request.then(r => r.json()).then(data => {\n      this.setState({\n        data: data.features\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n}","map":{"version":3,"sources":["/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayer.js"],"names":["React","GeoJSON","FeatureGroup","Popup","GeojsonLayer","Component","constructor","props","myStyle","color","weight","opacity","fillColor","dashArray","state","data","console","log","render","info","map","f","properties","id","name","componentDidMount","url","fetchData","componentWillUnmount","request","fetch","then","r","json","setState","features","error"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,KAAhC,QAA6C,eAA7C;AACA,OAAO,yBAAP;AAEA,eAAe,MAAMC,YAAN,SAA2BJ,KAAK,CAACK,SAAjC,CAA2C;AACtDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,OAVmB,GAUT,MAAM;AACZ,aAAO;AACHC,QAAAA,KAAK,EAAE,OADJ;AAEHC,QAAAA,MAAM,EAAE,CAFL;AAGHC,QAAAA,OAAO,EAAE,CAHN;AAIHC,QAAAA,SAAS,EAAE,KAJR;AAKHC,QAAAA,SAAS,EAAE;AALR,OAAP;AAOH,KAlBkB;;AAGf,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE;AADG,KAAb;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACH;;AAYDC,EAAAA,MAAM,GAAG;AACLF,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AAEAD,IAAAA,OAAO,CAACG,IAAR,CAAa,KAAKL,KAAL,CAAWC,IAAxB;AACA,wBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKD,KAAL,CAAWC,IAAX,CAAgBK,GAAhB,CAAoBC,CAAC,IAAI;AACtB,0BAAO,oBAAC,OAAD;AAAS,QAAA,GAAG,EAAEA,CAAC,CAACC,UAAF,CAAaC,EAA3B;AAA+B,QAAA,IAAI,EAAEF,CAArC;AAAwC,QAAA,KAAK,EAAE,KAAKb,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACH,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQa,CAAC,CAACC,UAAF,CAAaE,IAArB,CADG,CAAP;AAGH,KAJA,CADL,CADJ;AASH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKlB,KAAL,CAAWmB,GAAf,EAAoB;AAChB,WAAKC,SAAL,CAAe,KAAKpB,KAAL,CAAWmB,GAA1B;AACH;;AACDV,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACH;;AAEDW,EAAAA,oBAAoB,GAAG;AACnBZ,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AAEH;;AAEDU,EAAAA,SAAS,CAACD,GAAD,EAAM;AACX,QAAIG,OAAO,GAAGC,KAAK,CAACJ,GAAD,CAAnB;AAEAG,IAAAA,OAAO,CACFE,IADL,CACUC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADf,EAEKF,IAFL,CAEUhB,IAAI,IAAI;AACV,WAAKmB,QAAL,CAAc;AACVnB,QAAAA,IAAI,EAAEA,IAAI,CAACoB;AADD,OAAd;AAGH,KANL,EAMQC,KAAD,IAAW;AACVpB,MAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACH,KARL;AASH;;AA5DqD","sourcesContent":["import React from 'react';\nimport { GeoJSON, FeatureGroup, Popup } from 'react-leaflet';\nimport \"../css/GeojsonLayer.css\"\n\nexport default class GeojsonLayer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: []\n        };\n\n        console.log('contructor');\n    }\n\n    myStyle = () => {\n        return {\n            color: \"green\",\n            weight: 3,\n            opacity: 1,\n            fillColor: \"red\",\n            dashArray: '8 5'\n        }\n    }\n\n    render() {\n        console.log('render');\n\n        console.info(this.state.data);\n        return (\n            <FeatureGroup>\n                {this.state.data.map(f => {\n                    return <GeoJSON key={f.properties.id} data={f} style={this.myStyle}>\n                        <Popup>{f.properties.name}</Popup>\n                    </GeoJSON>\n                })}\n            </FeatureGroup>\n        );\n    }\n\n    componentDidMount() {\n        if (this.props.url) {\n            this.fetchData(this.props.url);\n        }\n        console.log('did mount');\n    }\n\n    componentWillUnmount() {\n        console.log('will unmount');\n\n    }\n\n    fetchData(url) {\n        let request = fetch(url);\n\n        request\n            .then(r => r.json())\n            .then(data => {\n                this.setState({\n                    data: data.features\n                });\n            }, (error) => {\n                console.error(error);\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}