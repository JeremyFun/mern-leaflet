{"ast":null,"code":"var _jsxFileName = \"/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayer.js\";\nimport React, { useEffect, useState } from 'react';\nimport { GeoJSON, FeatureGroup, Popup } from 'react-leaflet';\nimport \"../App.css\";\n\nconst GeojsonLayer = () => {\n  // constructor(props) {\n  //     super(props);\n  //\n  //     this.state = {\n  //         data: []\n  //     };\n  //\n  //     console.log('contructor');\n  // }\n  const [data, setData] = useState([]);\n\n  const myStyle = () => {\n    return {\n      color: \"green\",\n      weight: 3,\n      opacity: 1,\n      fillColor: \"red\",\n      dashArray: '8 5'\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(FeatureGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, this.state.data.map(f => {\n    return /*#__PURE__*/React.createElement(GeoJSON, {\n      key: f.properties.id,\n      data: f,\n      style: myStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 28\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, f.properties.name));\n  }));\n\n  const fetchData = url => {\n    let request = fetch(url);\n    request.then(r => r.json()).then(data => {\n      setData(data.features);\n    }, error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    if (this.props.url) {\n      this.fetchData(this.props.url);\n    }\n  }, []); // componentDidMount() {\n  //     if (this.props.url) {\n  //         this.fetchData(this.props.url);\n  //     }\n  //     console.log('did mount');\n  // }\n};\n\nexport default GeojsonLayer;","map":{"version":3,"sources":["/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayer.js"],"names":["React","useEffect","useState","GeoJSON","FeatureGroup","Popup","GeojsonLayer","data","setData","myStyle","color","weight","opacity","fillColor","dashArray","state","map","f","properties","id","name","fetchData","url","request","fetch","then","r","json","features","error","console","props"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAASC,OAAT,EAAkBC,YAAlB,EAAgCC,KAAhC,QAA6C,eAA7C;AACA,OAAO,YAAP;;AAEA,MAAMC,YAAY,GAAG,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMO,OAAO,GAAG,MAAM;AAClB,WAAO;AACHC,MAAAA,KAAK,EAAE,OADJ;AAEHC,MAAAA,MAAM,EAAE,CAFL;AAGHC,MAAAA,OAAO,EAAE,CAHN;AAIHC,MAAAA,SAAS,EAAE,KAJR;AAKHC,MAAAA,SAAS,EAAE;AALR,KAAP;AAOH,GARD;;AASI,sBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,KAAKC,KAAL,CAAWR,IAAX,CAAgBS,GAAhB,CAAoBC,CAAC,IAAI;AACtB,wBAAO,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,CAAC,CAACC,UAAF,CAAaC,EAA3B;AAA+B,MAAA,IAAI,EAAEF,CAArC;AAAwC,MAAA,KAAK,EAAER,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACH,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQQ,CAAC,CAACC,UAAF,CAAaE,IAArB,CADG,CAAP;AAGH,GAJA,CADL,CADJ;;AAUJ,QAAMC,SAAS,GAAIC,GAAD,IAAS;AACvB,QAAIC,OAAO,GAAGC,KAAK,CAACF,GAAD,CAAnB;AAEAC,IAAAA,OAAO,CACFE,IADL,CACUC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADf,EAEKF,IAFL,CAEUlB,IAAI,IAAI;AACVC,MAAAA,OAAO,CAACD,IAAI,CAACqB,QAAN,CAAP;AACH,KAJL,EAIQC,KAAD,IAAW;AACVC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,KANL;AAOH,GAVD;;AAYA5B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,KAAK8B,KAAL,CAAWT,GAAf,EAAoB;AAChB,WAAKD,SAAL,CAAe,KAAKU,KAAL,CAAWT,GAA1B;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT,CA5CuB,CAiDvB;AACA;AACA;AACA;AACA;AACA;AAEH,CAxDD;;AA0DA,eAAehB,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport { GeoJSON, FeatureGroup, Popup } from 'react-leaflet';\nimport \"../App.css\"\n\nconst GeojsonLayer = () => {\n    // constructor(props) {\n    //     super(props);\n    //\n    //     this.state = {\n    //         data: []\n    //     };\n    //\n    //     console.log('contructor');\n    // }\n\n    const [data, setData] = useState([])\n\n    const myStyle = () => {\n        return {\n            color: \"green\",\n            weight: 3,\n            opacity: 1,\n            fillColor: \"red\",\n            dashArray: '8 5'\n        }\n    }\n        return (\n            <FeatureGroup>\n                {this.state.data.map(f => {\n                    return <GeoJSON key={f.properties.id} data={f} style={myStyle}>\n                        <Popup>{f.properties.name}</Popup>\n                    </GeoJSON>\n                })}\n            </FeatureGroup>\n        );\n\n    const fetchData = (url) => {\n        let request = fetch(url);\n\n        request\n            .then(r => r.json())\n            .then(data => {\n                setData(data.features)\n            }, (error) => {\n                console.error(error);\n            });\n    }\n\n    useEffect(() => {\n        if (this.props.url) {\n            this.fetchData(this.props.url);\n        }\n    }, [])\n    // componentDidMount() {\n    //     if (this.props.url) {\n    //         this.fetchData(this.props.url);\n    //     }\n    //     console.log('did mount');\n    // }\n\n}\n\nexport default GeojsonLayer\n"]},"metadata":{},"sourceType":"module"}