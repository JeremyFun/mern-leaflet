{"ast":null,"code":"const API_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000/api/v1/messages' : 'production_url_here';\nexport function getMessages() {\n  return fetch(API_URL).then(res => res.json()).then(messages => {\n    const haveSeenLocation = {};\n    return messages.reduce((all, message) => {\n      const key = `${message.latitude.toFixed(2)}${message.longitude.toFixed(2)}`;\n\n      if (haveSeenLocation[key]) {\n        console.log(haveSeenLocation[key], 'key');\n        haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || [];\n        haveSeenLocation[key].otherMessages.push(message);\n      } else {\n        haveSeenLocation[key] = message;\n        all.push(message);\n      }\n\n      return all;\n    }, []);\n  });\n}\nexport function getLocation() {\n  return new Promise(resolve => {\n    navigator.geolocation.getCurrentPosition(position => {\n      resolve({\n        lat: position.coords.latitude,\n        lng: position.coords.longitude\n      });\n    }, () => {\n      console.log('uh, oh... they didnt give us their location...');\n      resolve(fetch('http://ip-api.com/json/').then(res => res.json()).then(location => {\n        return {\n          lat: location.lat,\n          lng: location.lon\n        };\n      }));\n    });\n  });\n}\nexport function sendMessage(message) {\n  return fetch(API_URL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name: this.state.userMessage.name,\n      message: this.state.userMessage.message,\n      latitude: this.state.location.lat,\n      longitude: this.state.location.lng\n    })\n  }).then(res => res.json()).then(message => {\n    console.log(message);\n    setTimeout(() => {\n      this.setState({\n        sendingMessage: false,\n        sentMessage: true\n      });\n    }, 4000);\n  });\n}","map":{"version":3,"sources":["/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/API.js"],"names":["API_URL","window","location","hostname","getMessages","fetch","then","res","json","messages","haveSeenLocation","reduce","all","message","key","latitude","toFixed","longitude","console","log","otherMessages","push","getLocation","Promise","resolve","navigator","geolocation","getCurrentPosition","position","lat","coords","lng","lon","sendMessage","method","headers","body","JSON","stringify","name","state","userMessage","setTimeout","setState","sendingMessage","sentMessage"],"mappings":"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","sourcesContent":["const API_URL = window.location.hostname === 'localhost' ? 'http://localhost:5000/api/v1/messages' : 'production_url_here'\n\n\nexport function getMessages() {\n    return fetch(API_URL)\n        .then(res => res.json())\n        .then(messages => {\n            const haveSeenLocation = {}\n            return messages.reduce((all, message) => {\n                const key = `${message.latitude.toFixed(2)}${message.longitude.toFixed(2)}`\n                if (haveSeenLocation[key]) {\n                    console.log(haveSeenLocation[key], 'key')\n                    haveSeenLocation[key].otherMessages = haveSeenLocation[key].otherMessages || []\n                    haveSeenLocation[key].otherMessages.push(message)\n                } else {\n                    haveSeenLocation[key] = message;\n                    all.push(message);\n                }\n                return all;\n            }, [])\n        })\n}\n\nexport function getLocation() {\n    return new Promise((resolve) => {\n        navigator.geolocation.getCurrentPosition((position) => {\n            resolve({\n                    lat: position.coords.latitude,\n                    lng: position.coords.longitude\n                }\n            )\n        }, () => {\n            console.log('uh, oh... they didnt give us their location...')\n            resolve(fetch('http://ip-api.com/json/')\n                .then(res => res.json())\n                .then(location => {\n                    return {\n                            lat: location.lat,\n                            lng: location.lon\n                        }\n                }));\n        })\n    })\n}\n\nexport function sendMessage(message) {\n    return fetch(API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            name: this.state.userMessage.name,\n            message: this.state.userMessage.message,\n            latitude: this.state.location.lat,\n            longitude: this.state.location.lng\n        })\n    })\n        .then(res => res.json())\n        .then(message => {\n            console.log(message)\n            setTimeout(() => {\n                this.setState({\n                    sendingMessage: false,\n                    sentMessage: true\n                })\n            }, 4000)\n        })\n}"]},"metadata":{},"sourceType":"module"}