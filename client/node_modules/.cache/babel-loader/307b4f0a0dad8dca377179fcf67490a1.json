{"ast":null,"code":"var _jsxFileName = \"/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/MapPage.js\";\nimport React from 'react';\nimport '../App.css';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport L from 'leaflet';\nimport Joi from 'joi';\nimport MessageCard from \"./MessageCard\";\nimport { getMessages, getLocation, sendMessage } from \"../API/API\";\nimport messageIcon from \"../assets/svg/message-location.svg\";\nimport myIcon from \"../assets/svg/my-location.svg\";\nimport { Button } from 'reactstrap';\nimport Basemap from \"./Basemap\";\nexport const messagesIcon = new L.Icon({\n  iconUrl: messageIcon,\n  iconSize: [50, 82]\n});\nexport const myIcons = new L.Icon({\n  iconUrl: myIcon,\n  iconSize: [50, 82]\n});\nconst schema = Joi.object().keys({\n  name: Joi.string().min(1).max(500).required(),\n  message: Joi.string().min(1).max(500).required()\n});\nexport class MapPage extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      location: {\n        lat: 50.433300,\n        lng: 30.416700\n      },\n      haveUserLocation: false,\n      zoom: 2,\n      userMessage: {\n        name: '',\n        message: ''\n      },\n      sendingMessage: false,\n      showMessage: false,\n      sentMessage: false,\n      messages: [],\n      basemap: 'osm',\n      geojsonvisible: false\n    };\n\n    this.showMessage = () => {\n      this.setState({\n        showMessage: true\n      });\n    };\n\n    this.quitWithMessage = () => {\n      this.setState({\n        showMessage: false\n      });\n    };\n\n    this.formIsValid = () => {\n      const userMessage = {\n        name: this.state.userMessage.name,\n        message: this.state.userMessage.message\n      };\n      const result = schema.validate(userMessage);\n\n      if (this.state.haveUserLocation) {\n        if (!result.error) {\n          return true;\n        }\n\n        return false;\n      }\n    };\n\n    this.formSubmitted = event => {\n      event.preventDefault();\n      this.setState({\n        sendingMessage: true\n      });\n\n      if (this.formIsValid()) {\n        const message = {\n          name: this.state.userMessage.name,\n          message: this.state.userMessage.message,\n          latitude: this.state.location.lat,\n          longitude: this.state.location.lng\n        };\n        sendMessage(message).then(result => {\n          setTimeout(() => {\n            this.setState({\n              sendingMessage: false,\n              sentMessage: true\n            });\n          }, 4000);\n        });\n      }\n    };\n\n    this.valueChanged = event => {\n      const {\n        name,\n        value\n      } = event.target;\n      this.setState(prevState => ({\n        userMessage: { ...prevState.userMessage,\n          [name]: value\n        }\n      }));\n    };\n\n    this.onBMChange = bm => {\n      // console.log(this);\n      this.setState({\n        basemap: bm\n      });\n    };\n  }\n\n  componentDidMount() {\n    getMessages().then(messages => {\n      this.setState({\n        messages,\n        zoom: 3.5\n      });\n    });\n    getLocation().then(location => {\n      this.setState({\n        location,\n        haveUserLocation: true,\n        zoom: 13\n      });\n    });\n  }\n\n  render() {\n    const position = [this.state.location.lat, this.state.location.lng];\n    const basemapsDict = {\n      osm: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      hot: \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\n      dark: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png\",\n      cycle: \"https://dev.{s}.tile.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Map, {\n      className: \"map\",\n      center: position,\n      zoom: this.state.zoom,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TileLayer, {\n      attribution: \"&copy <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\",\n      url: basemapsDict[this.state.basemap],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 21\n      }\n    }), this.state.haveUserLocation ? /*#__PURE__*/React.createElement(Marker, {\n      position: position,\n      icon: myIcons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 33\n      }\n    }, \"Here will be \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 50\n      }\n    }), \" your comment.\")) : \"\", this.state.messages.map(message => {\n      return /*#__PURE__*/React.createElement(Marker, {\n        key: message._id,\n        position: [message.latitude, message.longitude],\n        icon: messagesIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(Popup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 37\n        }\n      }, /*#__PURE__*/React.createElement(\"em\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 40\n        }\n      }, message.name), \"   :   \", message.message), message.otherMessages ? message.otherMessages.map(message => /*#__PURE__*/React.createElement(\"p\", {\n        key: message._id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 99\n        }\n      }, /*#__PURE__*/React.createElement(\"em\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 41\n        }\n      }, message.name), \"  :  \", message.message)) : \"\"));\n    })), /*#__PURE__*/React.createElement(Basemap, {\n      basemap: this.state.basemap,\n      onChange: this.onBMChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }), !this.state.showMessage ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      outline: true,\n      color: \"primary\",\n      onClick: this.showMessage,\n      className: \"message-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 29\n      }\n    }, \"Add message\")) : /*#__PURE__*/React.createElement(MessageCard, {\n      sendingMessage: this.state.sendingMessage,\n      sentMessage: this.state.sentMessage,\n      haveUserLocation: this.state.haveUserLocation,\n      formSubmitted: this.formSubmitted,\n      valueChanged: this.valueChanged,\n      formIsValid: this.formIsValid,\n      quitWithMessage: this.quitWithMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 25\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/MapPage.js"],"names":["React","Map","TileLayer","Marker","Popup","L","Joi","MessageCard","getMessages","getLocation","sendMessage","Button","Basemap","messagesIcon","Icon","iconUrl","messageIcon","iconSize","myIcons","myIcon","schema","object","keys","name","string","min","max","required","message","MapPage","Component","state","location","lat","lng","haveUserLocation","zoom","userMessage","sendingMessage","showMessage","sentMessage","messages","basemap","geojsonvisible","setState","quitWithMessage","formIsValid","result","validate","error","formSubmitted","event","preventDefault","latitude","longitude","then","setTimeout","valueChanged","value","target","prevState","onBMChange","bm","componentDidMount","render","position","basemapsDict","osm","hot","dark","cycle","map","_id","otherMessages"],"mappings":"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","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nimport {Map, TileLayer, Marker, Popup} from 'react-leaflet'\nimport L from 'leaflet'\nimport Joi from 'joi'\n\nimport MessageCard from \"./MessageCard\";\n\nimport {getMessages, getLocation, sendMessage} from \"../API/API\";\n\nimport messageIcon from '../assets/svg/message-location.svg'\nimport myIcon from '../assets/svg/my-location.svg'\n\nimport {Button} from 'reactstrap';\nimport Basemap from \"./Basemap\";\n\nexport const messagesIcon = new L.Icon({\n    iconUrl: messageIcon,\n    iconSize: [50, 82],\n})\n\nexport const myIcons = new L.Icon({\n    iconUrl: myIcon,\n    iconSize: [50, 82]\n})\n\nconst schema = Joi.object().keys({\n    name: Joi.string().min(1).max(500).required(),\n    message: Joi.string().min(1).max(500).required(),\n})\n\nexport class MapPage extends React.Component {\n    state = {\n        location: {\n            lat: 50.433300,\n            lng: 30.416700,\n        },\n        haveUserLocation: false,\n        zoom: 2,\n        userMessage: {\n            name: '',\n            message: ''\n        },\n        sendingMessage: false,\n        showMessage: false,\n        sentMessage: false,\n        messages: [],\n\n        basemap: 'osm',\n        geojsonvisible: false\n    }\n\n    componentDidMount() {\n        getMessages()\n            .then(messages => {\n                this.setState({\n                    messages,\n                    zoom: 3.5\n                })\n            })\n        getLocation()\n            .then(location => {\n                this.setState({\n                    location,\n                    haveUserLocation: true,\n                    zoom: 13,\n                })\n            })\n    }\n\n    showMessage = () => {\n        this.setState({\n            showMessage: true\n        })\n    }\n\n    quitWithMessage = () => {\n        this.setState({\n            showMessage: false\n        })\n    }\n\n    formIsValid = () => {\n        const userMessage = {\n            name: this.state.userMessage.name,\n            message: this.state.userMessage.message\n        }\n        const result = schema.validate(userMessage)\n\n        if (this.state.haveUserLocation) {\n            if (!result.error) {\n                return true\n            }\n            return false\n        }\n    }\n\n    formSubmitted = (event) => {\n        event.preventDefault()\n        this.setState({\n            sendingMessage: true\n        })\n        if (this.formIsValid()) {\n            const message = {\n                name: this.state.userMessage.name,\n                message: this.state.userMessage.message,\n                latitude: this.state.location.lat,\n                longitude: this.state.location.lng\n            }\n            sendMessage(message)\n                .then((result) => {\n                    setTimeout(() => {\n                        this.setState({\n                            sendingMessage: false,\n                            sentMessage: true\n                        })\n                    }, 4000)\n                })\n        }\n    }\n\n    valueChanged = (event) => {\n        const {name, value} = event.target\n        this.setState((prevState) => ({\n            userMessage: {\n                ...prevState.userMessage,\n                [name]: value\n            }\n        }))\n    }\n\n    onBMChange = (bm) => {\n        // console.log(this);\n        this.setState({\n            basemap: bm\n        });\n    }\n\n\n    render() {\n        const position = [this.state.location.lat, this.state.location.lng]\n\n        const basemapsDict = {\n            osm: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            hot: \"https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png\",\n            dark: \"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png\",\n            cycle: \"https://dev.{s}.tile.openstreetmap.fr/cyclosm/{z}/{x}/{y}.png\"\n        }\n        return (\n            <div className=\"map\">\n                <Map className=\"map\" center={position} zoom={this.state.zoom}>\n                    <TileLayer\n                        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                        url={basemapsDict[this.state.basemap]}\n                    />\n                    {\n                        this.state.haveUserLocation\n                            ? <Marker position={position} icon={myIcons}>\n                                <Popup>\n                                    Here will be <br/> your comment.\n                                </Popup>\n                            </Marker>\n                            : \"\"\n                    }\n                    {\n                        this.state.messages.map(message => {\n                            return (<Marker key={message._id} position={[message.latitude, message.longitude]}\n                                            icon={messagesIcon}>\n                                <Popup>\n                                    <p><em>{message.name}</em>   :   {message.message}</p>\n                                    {message.otherMessages ? message.otherMessages.map(message => <p key={message._id}>\n                                        <em>{message.name}</em>  :  {message.message}</p>) : \"\"}\n                                </Popup>\n                            </Marker>)\n                        })\n                    }\n                </Map>\n\n                <Basemap basemap={this.state.basemap} onChange={this.onBMChange}/>\n\n                {\n                    !this.state.showMessage\n                        ?\n                        <>\n                            <Button outline\n                                    color=\"primary\"\n                                    onClick={this.showMessage}\n                                    className=\"message-form\"\n                            >Add message</Button>\n                        </>\n                        :\n                        <MessageCard\n                            sendingMessage={this.state.sendingMessage}\n                            sentMessage={this.state.sentMessage}\n                            haveUserLocation={this.state.haveUserLocation}\n                            formSubmitted={this.formSubmitted}\n                            valueChanged={this.valueChanged}\n                            formIsValid={this.formIsValid}\n                            quitWithMessage={this.quitWithMessage}\n                        />\n                }\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}