{"ast":null,"code":"var _jsxFileName = \"/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayer.js\";\nimport React, { useEffect, useState } from 'react';\nimport { GeoJSON, FeatureGroup, Popup } from 'react-leaflet';\n\nconst GeojsonLayer = props => {\n  const [data, setData] = useState([]);\n\n  const myStyle = () => {\n    return {\n      color: \"green\",\n      weight: 3,\n      opacity: 1,\n      fillColor: \"red\",\n      dashArray: '8 5'\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(FeatureGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, data.map(f => {\n    return /*#__PURE__*/React.createElement(GeoJSON, {\n      key: f.properties.id,\n      data: f,\n      style: myStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 24\n      }\n    }, /*#__PURE__*/React.createElement(Popup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }, f.properties.name));\n  }));\n  useEffect(() => {\n    if (this.props.url) {\n      fetchData(this.props.url);\n    }\n  }, []);\n\n  const fetchData = url => {\n    let request = fetch(url);\n    request.then(r => r.json()).then(data => {\n      this.setData(data.features);\n    }, error => {\n      console.error(error);\n    });\n  };\n};\n\nexport default GeojsonLayer;","map":{"version":3,"sources":["/home/kango/Documents/MERN Projects/react-leaflet-master/client/src/Components/GeojsonLayer.js"],"names":["React","useEffect","useState","GeoJSON","FeatureGroup","Popup","GeojsonLayer","props","data","setData","myStyle","color","weight","opacity","fillColor","dashArray","map","f","properties","id","name","url","fetchData","request","fetch","then","r","json","features","error","console"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,OAAR,EAAiBC,YAAjB,EAA+BC,KAA/B,QAA2C,eAA3C;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMQ,OAAO,GAAG,MAAM;AAClB,WAAO;AACHC,MAAAA,KAAK,EAAE,OADJ;AAEHC,MAAAA,MAAM,EAAE,CAFL;AAGHC,MAAAA,OAAO,EAAE,CAHN;AAIHC,MAAAA,SAAS,EAAE,KAJR;AAKHC,MAAAA,SAAS,EAAE;AALR,KAAP;AAOH,GARD;;AAUA,sBACI,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,IAAI,CAACQ,GAAL,CAASC,CAAC,IAAI;AACX,wBAAO,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAEA,CAAC,CAACC,UAAF,CAAaC,EAA3B;AAA+B,MAAA,IAAI,EAAEF,CAArC;AAAwC,MAAA,KAAK,EAAEP,OAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACH,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQO,CAAC,CAACC,UAAF,CAAaE,IAArB,CADG,CAAP;AAGH,GAJA,CADL,CADJ;AASAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,KAAKM,KAAL,CAAWc,GAAf,EAAoB;AAChBC,MAAAA,SAAS,CAAC,KAAKf,KAAL,CAAWc,GAAZ,CAAT;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;;AAOA,QAAMC,SAAS,GAAID,GAAD,IAAS;AACvB,QAAIE,OAAO,GAAGC,KAAK,CAACH,GAAD,CAAnB;AACAE,IAAAA,OAAO,CACFE,IADL,CACUC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADf,EAEKF,IAFL,CAEUjB,IAAI,IAAI;AACV,WAAKC,OAAL,CAAaD,IAAI,CAACoB,QAAlB;AACH,KAJL,EAIQC,KAAD,IAAW;AACVC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACH,KANL;AAOH,GATD;AAUH,CAvCD;;AAyCA,eAAevB,YAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {GeoJSON, FeatureGroup, Popup} from 'react-leaflet';\n\nconst GeojsonLayer = (props) => {\n    const [data, setData] = useState([])\n\n    const myStyle = () => {\n        return {\n            color: \"green\",\n            weight: 3,\n            opacity: 1,\n            fillColor: \"red\",\n            dashArray: '8 5'\n        }\n    }\n\n    return (\n        <FeatureGroup>\n            {data.map(f => {\n                return <GeoJSON key={f.properties.id} data={f} style={myStyle}>\n                    <Popup>{f.properties.name}</Popup>\n                </GeoJSON>\n            })}\n        </FeatureGroup>\n    );\n    useEffect(() => {\n        if (this.props.url) {\n            fetchData(this.props.url);\n        }\n    }, [])\n\n\n    const fetchData = (url) => {\n        let request = fetch(url);\n        request\n            .then(r => r.json())\n            .then(data => {\n                this.setData(data.features)\n            }, (error) => {\n                console.error(error);\n            });\n    }\n}\n\nexport default GeojsonLayer"]},"metadata":{},"sourceType":"module"}